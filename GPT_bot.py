import random
import json
from datetime import datetime
from telegram import Update, BotCommand, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from dotenv import load_dotenv
import os
import logging
import database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json
try:
    with open("config.json", "r", encoding="utf-8") as config_file:
        config = json.load(config_file)
        logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except FileNotFoundError:
    logging.error("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit(1)
except json.JSONDecodeError as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ config.json: {e}")
    exit(1)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[KeyboardButton("–û—Ä–∞–∫—É–ª"), KeyboardButton("–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä")]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    database.add_user(user_id, username)
    context.user_data["mode"] = "magic_ball"  # –°—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    logging.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É, —Ä–µ–∂–∏–º: Magic Ball")
    
    await update.message.reply_text(
        config["messages"]["start"], reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /oracle
async def oracle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "oracle"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.update_user_mode(update.message.from_user.id, "oracle") ###

    logging.info(f"üîÆ –†–µ–∂–∏–º –û—Ä–∞–∫—É–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {update.message.from_user.username}")
    await update.message.reply_text(config["messages"]["oracle_mode"])

# –ö–æ–º–∞–Ω–¥–∞ /magicball
async def magicball(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "magic_ball"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.update_user_mode(update.message.from_user.id, "magic_ball") ###

    logging.info(f"üé± –†–µ–∂–∏–º –ú–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {update.message.from_user.username}")
    await update.message.reply_text(config["messages"]["magic_ball_mode"])

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ú–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –®–∞—Ä–∞
async def generate_magic_ball_response(question, user_id, context):
    now = datetime.now()

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –¥–µ–Ω—å
    if "last_interaction_date" in context.user_data:
        last_date = context.user_data["last_interaction_date"]
        if now.date() != last_date:
            context.user_data.clear()

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π
    if "last_question" in context.user_data and question.lower() in config["repeat_triggers"]:
        return f"{context.user_data['last_response']} (—è –ø–æ–≤—Ç–æ—Ä—è—é)."

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    chosen_tone = random.choice(["negative", "positive", "neutral"])
    response = random.choice(config["magic_ball_responses"][chosen_tone])

    # –†–µ–¥–∫–∏–π —Å–ª—É—á–∞–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã
    if random.random() < 0.1:  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        response += " " + random.choice(config["magic_ball_responses"]["extra"])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context.user_data["last_question"] = question.lower()
    context.user_data["last_response"] = response
    context.user_data["last_interaction_date"] = now.date()

    logging.info(f"üé± Magic Ball –æ—Ç–≤–µ—Ç–∏–ª: {response}")
    return response

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –û—Ä–∞–∫—É–ª–∞
async def generate_oracle_response(question):
    try:
        openai_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": config["oracle_description"]},
                {"role": "user", "content": question}
            ]
        )
        response = openai_response["choices"][0]["message"]["content"].strip()
        logging.info(f"üîÆ Oracle –æ—Ç–≤–µ—Ç–∏–ª: {response}")
        return response
    except openai.error.OpenAIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return config["messages"]["oracle_error"]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    user_id = update.message.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Ç–∞–µ–º –∏–∑ –ë–î)
    mode = context.user_data.get("mode", database.get_user_mode(user_id)) ###

    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}' | –†–µ–∂–∏–º: {mode}")

    if user_message == config["hidden_mode_trigger"]:
        context.user_data["mode"] = "hidden"
        context.user_data["hidden_mode_index"] = 0
        await update.message.reply_text(config["messages"]["hidden_mode_activated"])
        return

    if mode == "magic_ball":
        response = await generate_magic_ball_response(user_message, user_id, context)
    elif mode == "oracle":
        response = await generate_oracle_response(user_message)
    else:
        response = config["messages"]["unknown_mode"]

    await update.message.reply_text(response)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def set_commands(application):
    commands = [BotCommand(cmd["command"], cmd["description"]) for cmd in config["commands"]]
    await application.bot.set_my_commands(commands)
    logging.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token(BOT_TOKEN).post_init(set_commands).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("oracle", oracle))
    application.add_handler(CommandHandler("magicball", magicball))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    try:
        application.run_polling()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
